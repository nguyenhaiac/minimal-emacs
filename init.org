#+TITLE: Emacs configuration file
#+AUTHOR: Nguyen Tien Hai
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el 
#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

* Initialize the configuration
** Tangle & byte compile

Tangle and byte compile

#+BEGIN_SRC emacs-lisp
(defun my--tangle-byte-compile-org ()
 "Tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)
     (byte-recompile-directory (expand-file-name user-emacs-directory) 0)))
#+END_SRC

Tangle

#+BEGIN_SRC emacs-lisp
(defun my--tangle-org ()
 "Tangles emacs.org and byte compiles ~/.emacs.d/"
   (interactive)
   (when (equal (buffer-name)
                (concat "init.org"))
     (org-babel-tangle)))
(add-hook 'after-save-hook #'my--tangle-org)
#+END_SRC

** Bootstrap straight.el
*** Install straight.el if not yet
    #+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Install use-package and set it to use straight by default
    #+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(straight-use-package 'org-plus-contrib)
(require 'org-tempo)
#+END_SRC
*** Neccessary sane default
    #+begin_src emacs-lisp
      (server-mode t)
      (use-package better-defaults)
      (use-package gcmh
	:config
	(gcmh-mode 1))
      (setq org-src-window-setup 'split-window-below
	    custom-safe-themes t
	    )
      (fset 'yes-or-no-p 'y-or-n-p)
      (setq-default fringe-indicator-alist (assq-delete-all 'truncation fringe-indicator-alist))

      (global-auto-revert-mode t)

      (setq
       cursor-in-non-selected-windows t  ; hide the cursor in inactive windows
       inhibit-splash-screen t
       echo-keystrokes 0.1               ; show keystrokes right away, don't show the message in the scratch buffe
       initial-scratch-message nil       ; empty scratch buffer
       initial-major-mode 'org-mode      ; org mode by default
       custom-safe-themes t
       confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
       make-backup-files nil
       auto-save-default nil
       create-lockfiles nil
       )
#+end_src

* Aesthetic

** Theme
    #+begin_src emacs-lisp
      (use-package modus-vivendi-theme)
      (use-package modus-operandi-theme)
      (load-theme 'modus-operandi)
    #+end_src
** Font setting
   #+begin_src emacs-lisp
     (add-to-list 'default-frame-alist
                  '(font . "Hack Nerd Font-12"))
   #+end_src

** Smart-mode-line
    #+begin_src emacs-lisp
      (use-package smart-mode-line-atom-one-dark-theme)
      (use-package smart-mode-line
        :config
        (setq sml/theme 'respectful)
        (sml/setup)
        (add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":dbox:")))
    #+end_src
** Rainbow-mode
    #+begin_src emacs-lisp
      (use-package rainbow-mode)
    #+end_src
* Ivy and counsel bundle
  #+begin_src emacs-lisp
    (use-package ivy
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t
            ivy-count-format "(%d/%d) "
            enable-recursive-minibuffer t
            ivy-initial-inputs-alist nil))
    (use-package counsel
      :config
      (counsel-mode 1))
    (use-package avy)
  #+end_src
* Autocomplete with company-mode
  #+begin_src emacs-lisp
    (use-package company
      :config
      (setq company-idle-delay 0.0
            company-minimum-prefix-length 1)
      (global-company-mode))
  #+end_src
* General
  #+begin_src emacs-lisp
    (use-package general)
  #+end_src
* Smartparens
  #+begin_src emacs-lisp
    (use-package smartparens
      :general
      (:keymaps 'smartparens-mode-map
                "C-M-f" 'sp-forward-sexp 
                "C-M-b" 'sp-backward-sexp
                "C-M-a" 'sp-beginning-of-sexp
                "C-M-e" 'sp-end-of-sexp
                "C-M-n" 'sp-next-sexp
                "C-M-p" 'sp-previous-sexp
                "C-M-t" 'sp-transpose-sexp
                "C-k" 'sp-kill-hybrid-sexp
                "C-)" 'sp-forward-slurp-sexp 
                "C-(" 'sp-backward-slurp-sexp 
                "M-)" 'sp-forward-barf-sexp 
                "M-(" 'sp-backward-barf-sexp 
                "C-S-s" 'sp-splice-sexp
                "C-M-S-<SPC>" (lambda () (interactive) (mark-sexp -1))
                "C-M-k" 'sp-kill-sexp
                "C-M-w" 'sp-copy-sexp
                "C-M-c" 'sp-clone-sexp
                "M-<delete>" 'sp-unwrap-sexp
                "M-<backspace>" 'sp-backward-unwrap-sexp
                )
      )
    (smartparens-global-mode)
  #+end_src

* Acewindows
  #+begin_src emacs-lisp
    (use-package ace-window
      :init
      (setq aw-background t
            aw-dispatch-always t
            aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i)))
    (defvar aw-dispatch-alist
      '((?x aw-delete-window "Delete Window")
            (?m aw-swap-window "Swap Windows")
            (?M aw-move-window "Move Window")
            (?c aw-copy-window "Copy Window")
            (?j aw-switch-buffer-in-window "Select Buffer")
            (?l aw-flip-window)
            (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
            (?k aw-split-window-fair "Split Fair Window")
            (?v aw-split-window-vert "Split Vert Window")
            (?b aw-split-window-horz "Split Horz Window")
            (?o delete-other-windows "Delete Other Windows")
            (?? aw-show-dispatch-help))
      "List of actions for `aw-dispatch-default'.")
  #+end_src
* Undo tree
  #+begin_src emacs-lisp
    (use-package undo-fu
      :general
      (:keymaps 'global-map
                "C-z" 'undo-fu-only-undo
                "C-s-z" 'undo-fu-only-redo))
  #+end_src
* Magit
  #+begin_src emacs-lisp
    (use-package magit)
  #+end_src
* Python with lsp-mode
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :commands lsp
      :hook
      (lsp-mode . lsp-enable-which-key-integration))


    (use-package lsp-pyright
      :straight (lsp-pyright :type git :host github :repo "emacs-lsp/lsp-pyright")
      :hook (python-mode . (lambda ()
                             (require 'lsp-pyright)
                             (lsp))))

   #+end_src
* Vterm
  #+begin_src emacs-lisp
    (use-package vterm)
    (use-package vterm-toggle
      :straight (vterm-toggle :type git :host github :repo "jixiuf/vterm-toggle")
      :config
      (setq vterm-toggle-fullscreen-p nil)
      (add-to-list 'display-buffer-alist
                   '("^v?term.*"
                     (display-buffer-reuse-window display-buffer-at-bottom)
                     (reusable-frames . visible)
                     (window-height . 0.3)))
      (define-key vterm-mode-map (kbd "<C-backspace>")
        (lambda () (interactive) (vterm-send-key (kbd "C-w"))))
    (advice-add 'counsel-yank-pop-action :around #'vterm-counsel-yank-pop-action)
      )
  #+end_src
* Dired+
  #+begin_src emacs-lisp
    (use-package dired+
      :init
      (setq diredp-hide-details-initially-flag nil))
    (add-hook 'dired-before-readin-hook
              'diredp-breadcrumbs-in-header-line-mode)
  #+end_src
* Whichkey
  #+begin_src emacs-lisp
    (use-package which-key
      :config
      (which-key-mode))
  #+end_src
* Keybindings
  #+begin_src emacs-lisp
    (general-create-definer my-leader-def
      :prefix "C-c")

    (my-leader-def
      "b" 'counsel-bookmark
      "c" 'org-capture
      )

    (general-define-key
     "H-b" 'switch-to-buffer 
     "M-o" 'ace-window
     "H-." 'next-buffer
     "H-," 'previous-buffer
     "H-f" 'counsel-find-file
     "H-t" 'vterm-toggle
     "H-u" 'windmove-up
     "H-e" 'windmove-down
     "H-n" 'windmove-left
     "H-i" 'windmove-right
     "H-F" 'find-file-other-window
     "H-'" 'org-edit-special
     "H-d" 'delete-other-windows
     "H-D" 'delete-window
     "C-c c" 'org-roam-capture
     "C-c d" 'org-roam-dailies-capture-today)

    (general-define-key
     :keymaps 'org-src-mode-map
     "H-'" 'org-edit-src-exit
     "H-k" 'org-edit-src-abort)
     #+end_src
* Email
  #+begin_src emacs-lisp
    (use-package mu4e
      :config
      ;; This is set to 't' to avoid mail syncing issues when using mbsync
      (setq mu4e-change-filenames-when-moving t)

      ;; Refresh mail using isync every 10 minutes
      (setq mu4e-update-interval (* 10 60))
      (setq mu4e-get-mail-command "mbsync -a")
      (setq mu4e-maildir "~/Mail")

      (setq mu4e-drafts-folder "/[Gmail]/Drafts")
      (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
      (setq mu4e-refile-folder "/[Gmail]/All Mail")
      (setq mu4e-trash-folder  "/[Gmail]/Trash")

      (setq mu4e-maildir-shortcuts
          '(("/Inbox"             . ?i)
            ("/[Gmail]/Sent Mail" . ?s)
            ("/[Gmail]/Trash"     . ?t)
            ("/[Gmail]/Drafts"    . ?d)
            ("/[Gmail]/All Mail"  . ?a))))

    (setq smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 465
          smtpmail-smtp-user "admin@ergomech.store"
          smtpmail-stream-type  'ssl)

    (setq message-send-mail-function 'smtpmail-send-it)

    (require 'auth-source-pass)
    (auth-source-pass-enable)
    (setq auth-source-debug t)
    (setq auth-source-do-cache nil)
    (auth-source-pass-get 'secret "admin@ergomech.store")
    (setq mu4e-contexts
          (list
           ;; Work account
           (make-mu4e-context
            :name "Work"
            :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "admin@ergomech.store")
                    (user-full-name    . "ergomech")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-drafts-folder  . "/Gmail/[Gmail]/Drafts")
                    (mu4e-sent-folder  . "/Gmail/[Gmail]/Sent Mail")
                    (mu4e-refile-folder  . "/Gmail/[Gmail]/All Mail")
                    (mu4e-trash-folder  . "/Gmail/[Gmail]/Trash")))

           ;; Personal account
           (make-mu4e-context
            :name "Personal"
            :match-func
              (lambda (msg)
                (when msg
                  (string-prefix-p "/Fastmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "systemcrafterstest@fastmail.com")
                    (user-full-name    . "System Crafters Fastmail")
                    (smtpmail-smtp-server  . "smtp.fastmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-drafts-folder  . "/Fastmail/Drafts")
                    (mu4e-sent-folder  . "/Fastmail/Sent")
                    (mu4e-refile-folder  . "/Fastmail/Archive")
                    (mu4e-trash-folder  . "/Fastmail/Trash")))))

    (add-hook 'mu4e-compose-mode-hook 'turn-off-auto-fill)
    (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)
  #+end_src
  
  #+begin_src emacs-lisp
    (use-package org-roam
          :ensure t
          :hook
          (after-init . org-roam-mode)
          :custom
          (org-roam-directory "~/roam/")
          :bind (:map org-roam-mode-map
                  (("C-c n l" . org-roam)
                   ("C-c n f" . org-roam-find-file)
                   ("C-c n g" . org-roam-graph))
                  :map org-mode-map
                  (("C-c n i" . org-roam-insert))
                  (("C-c n I" . org-roam-insert-immediate))))


    (setq org-roam-dailies-directory "daily/")

    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             #'org-roam-capture--get-point
             "* %?"
             :file-name "daily/%<%Y-%m-%d>"
             :head "#+title: %<%Y-%m-%d>\n\n")))
     #+end_src
* Beancount
  #+begin_src emacs-lisp 
    (use-package beancount
      :straight (beancount-mode :type git :host github :repo "beancount/beancount-mode"))
  #+end_src
